swagger: "2.0"
info:
  description: "API Star Wars"
  version: "1.0.0"
  title: "API Star Wars 2.0"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "vladimir_marques_ros@hotmail.com"
  license:
    name: "Apache 2.0"
    url: "https://www.linkedin.com/in/vladimir-marques-da-rosa-120b2341/"
host: "swapi.swagger.io"
basePath: "/v2"
tags:
  - name: "swapi"
    description: "API para listar filmes da saga Stars Wars"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /films:
    get:
      tags:
        - "swapi"
      summary: "List all films"
      description: ""
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Films"
        "404":
          description: "Film not found"
    post:
      tags:
        - "swapi"
      summary: "Add a new film"
      description: ""
      operationId: "filmId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Film object that needs to be added to the galery"
          required: true
          schema:
            $ref: "#/definitions/Films"
      responses:
        "400":
          description: Invalid input
        "422":
          description: Validation exception

    put:
      tags:
        - "swapi"
      summary: "Update an existing film"
      description: ""
      operationId: "filmsId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Film object that needs to be added to the galery"
          required: true
          schema:
            $ref: "#/definitions/Films"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Film not found"
        "422":
          description: "Validation exception"

  /films/findByStatus:
    get:
      tags:
        - "swapi"
      summary: "Finds Film by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findByStatus"
      produces:
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Films"
        "400":
          description: "Invalid status value"

  /films/findByTags:
    get:
      tags:
        - "swapi"
      summary: "Finds Film by tags"
      description: "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
      operationId: "findByTags"
      produces:
        - "application/json"
      parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Films"
        "400":
          description: "Invalid tag value"

  /films/{filmId}:
    get:
      tags:
        - "swapi"
      summary: "Find film by ID"
      description: "Returns a single film"
      operationId: "getFilmId"
      produces:
        - "application/json"
      parameters:
        - name: "filmId"
          in: "path"
          description: "ID of film to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Films"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Film not found"

    post:
      tags:
        - "swapi"
      summary: "Updates a film in the store with form data"
      description: ""
      operationId: "updateFilmWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "filmId"
          in: "path"
          description: "ID of film that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the film"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the film"
          required: false
          type: "string"
      responses:
        "400":
          description: Invalid input
        "422":
          description: Validation exception
    delete:
      tags:
        - "swapi"
      summary: "Deletes a Film"
      description: ""
      operationId: "deleteId"
      produces:
        - "application/json"
      parameters:
        - name: "filmId"
          in: "path"
          description: "Film id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Film not found"
definitions:
  Films:
    type: object
    properties:
      episode_id:
        type: integer
      titulo:
        type: string
      opening_crawl:
        type: string
      release_date:
        type: string
      characters:
        type: "array"
        items:
          $ref: '#/definitions/Characters'
      planets:
        type: "array"
        items:
          $ref: '#/definitions/Planets'
      starships:
        type: "array"
        items:
          $ref: '#/definitions/Starships'
      vehicules:
        type: "array"
        items:
          $ref: '#/definitions/Vehicles'
      species:
        type: "array"
        items:
          $ref: '#/definitions/Species'
      created:
        type: string
        format: date
      edited:
        type: string
        format: date
      url:
        type: string
        format: uri
        example: "https://swapi.info/api/films/1"


  Vehicles:
    type: object
    properties:
      vehicules:
        type: string

  Species:
    type: object
    properties:
      species:
        type: string

  Starships:
    type: object
    properties:
      starships:
        type: string


  Planets:
    type: object
    properties:
      planets:
        type: string


  Characters:
    type: object
    properties:
      characters:
        type: string

  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
